{"version":3,"sources":["../../src/containers/Search.js"],"names":["initSearch","google","options","input","document","querySelector","searchBox","maps","places","Autocomplete","addListener","place","getPlace","geometry","console","warn","newBounds","ne","lat","viewport","getNorthEast","lng","sw","getSouthWest","mapState","setState","props","placeholder","style","onChange"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,SAASA,UAAT,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;AACnC,MAAMC,QAAQC,SAASC,aAAT,CAAuB,0BAAvB,CAAd;AACA,MAAIF,KAAJ,EAAW;AACT,QAAMG,YAAY,IAAIL,OAAOM,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CAAoCN,KAApC,EAA2CD,OAA3C,CAAlB;;AAEAI,cAAUI,WAAV,CAAsB,eAAtB,EAAuC,YAAW;AAChD,UAAMC,QAAQL,UAAUM,QAAV,EAAd;AACA,UAAID,KAAJ,EAAW;AACT,YAAI,CAACA,MAAME,QAAX,EAAqB;AACnBC,kBAAQC,IAAR,CAAa,qCAAb;AACA;AACD;;AAJQ,YAMDF,QANC,GAMYF,KANZ,CAMDE,QANC;;AAOT,YAAMG,YAAY;AAChBC,cAAI;AACFC,iBAAKL,SAASM,QAAT,CAAkBC,YAAlB,GAAiCF,GAAjC,EADH;AAEFG,iBAAKR,SAASM,QAAT,CAAkBC,YAAlB,GAAiCC,GAAjC;AAFH,WADY;AAKhBC,cAAI;AACFJ,iBAAKL,SAASM,QAAT,CAAkBI,YAAlB,GAAiCL,GAAjC,EADH;AAEFG,iBAAKR,SAASM,QAAT,CAAkBI,YAAlB,GAAiCF,GAAjC;AAFH;AALY,SAAlB;AAUAG,wBAASC,QAAT,CAAkB,EAAET,oBAAF,EAAlB;AACD;AACF,KArBD;AAsBD;AACF;;kBAEc,iBAAS;AACtB,MAAIU,MAAMzB,MAAV,EAAkB;AAChBD,eAAW0B,MAAMzB,MAAjB,EAAyByB,MAAMxB,OAA/B;AACD;;AAED,SACE;AACE,UAAK,MADP;AAEE,eAAU,yBAFZ;AAGE,iBAAawB,MAAMC,WAAN,IAAqB,qBAHpC;AAIE,WAAOD,MAAME,KAAN,IAAe,EAJxB;AAKE,cAAUF,MAAMG;AALlB,IADF;AASD,C","file":"Search.js","sourcesContent":["import React, { Component } from 'react';\nimport { fitBounds } from 'google-map-react/utils';\nimport { mapState } from '../state';\n\nfunction initSearch(google, options) {\n  const input = document.querySelector('.storeLocatorSearchInput');\n  if (input) {\n    const searchBox = new google.maps.places.Autocomplete(input, options);\n\n    searchBox.addListener('place_changed', function() {\n      const place = searchBox.getPlace();\n      if (place) {\n        if (!place.geometry) {\n          console.warn('Returned place contains no geometry');\n          return;\n        }\n\n        const { geometry } = place;\n        const newBounds = {\n          ne: {\n            lat: geometry.viewport.getNorthEast().lat(),\n            lng: geometry.viewport.getNorthEast().lng()\n          },\n          sw: {\n            lat: geometry.viewport.getSouthWest().lat(),\n            lng: geometry.viewport.getSouthWest().lng()\n          }\n        };\n        mapState.setState({ newBounds });\n      }\n    });\n  }\n}\n\nexport default props => {\n  if (props.google) {\n    initSearch(props.google, props.options);\n  }\n\n  return (\n    <input\n      type=\"text\"\n      className=\"storeLocatorSearchInput\"\n      placeholder={props.placeholder || 'Enter Your Location'}\n      style={props.style || {}}\n      onChange={props.onChange}\n    />\n  );\n};\n"]}