{"version":3,"sources":["../../src/containers/Search.js"],"names":["initSearch","google","options","getValue","input","document","querySelector","searchBox","maps","places","Autocomplete","addListener","place","getPlace","geometry","console","warn","newBounds","ne","lat","viewport","getNorthEast","lng","sw","getSouthWest","mapState","setState","updatedAddress","address_components","map","comp","types","includes","zip","short_name","address","city","state","country","props","placeholder","style","onChange"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,SAASA,UAAT,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+C;AAC7C,MAAMC,QAAQC,SAASC,aAAT,CAAuB,0BAAvB,CAAd;AACA,MAAIF,KAAJ,EAAW;AACT,QAAMG,YAAY,IAAIN,OAAOO,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CAAoCN,KAApC,EAA2CF,OAA3C,CAAlB;;AAEAK,cAAUI,WAAV,CAAsB,eAAtB,EAAuC,YAAW;AAChD,UAAMC,QAAQL,UAAUM,QAAV,EAAd;AACA,UAAID,KAAJ,EAAW;AACT,YAAI,CAACA,MAAME,QAAX,EAAqB;AACnBC,kBAAQC,IAAR,CAAa,qCAAb;AACA;AACD;;AAJQ,YAMDF,QANC,GAMYF,KANZ,CAMDE,QANC;;AAOT,YAAMG,YAAY;AAChBC,cAAI;AACFC,iBAAKL,SAASM,QAAT,CAAkBC,YAAlB,GAAiCF,GAAjC,EADH;AAEFG,iBAAKR,SAASM,QAAT,CAAkBC,YAAlB,GAAiCC,GAAjC;AAFH,WADY;AAKhBC,cAAI;AACFJ,iBAAKL,SAASM,QAAT,CAAkBI,YAAlB,GAAiCL,GAAjC,EADH;AAEFG,iBAAKR,SAASM,QAAT,CAAkBI,YAAlB,GAAiCF,GAAjC;AAFH;AALY,SAAlB;AAUAG,wBAASC,QAAT,CAAkB,EAAET,oBAAF,EAAlB;;AAEA,YAAIU,iBAAiB,EAArB;AACAf,cAAMgB,kBAAN,CAAyBC,GAAzB,CAA6B,gBAAQ;AACpC,cAAIC,KAAKC,KAAL,CAAWC,QAAX,CAAoB,aAApB,CAAJ,EAAwC;AACvCL,2BAAeM,GAAf,GAAqBH,KAAKI,UAA1B;AACA;AACD,cAAIJ,KAAKC,KAAL,CAAWC,QAAX,CAAoB,eAApB,CAAJ,EAA0C;AACzCL,2BAAeQ,OAAf,GAAyBL,KAAKI,UAA9B;AACA;AACD,cAAIJ,KAAKC,KAAL,CAAWC,QAAX,CAAoB,OAApB,CAAJ,EAAkC;AACjCL,2BAAeQ,OAAf,UAA8BL,KAAKI,UAAnC;AACA;AACD,cAAIJ,KAAKC,KAAL,CAAWC,QAAX,CAAoB,UAApB,CAAJ,EAAqC;AACpCL,2BAAeS,IAAf,GAAsBN,KAAKI,UAA3B;AACA;AACD,cAAIJ,KAAKC,KAAL,CAAWC,QAAX,CAAoB,6BAApB,CAAJ,EAAwD;AACvDL,2BAAeU,KAAf,GAAuBP,KAAKI,UAA5B;AACA;AACD,cAAIJ,KAAKC,KAAL,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AACnCL,2BAAeW,OAAf,GAAyBR,KAAKI,UAA9B;AACA;AACD,SAnBD;AAoBAP,uBAAef,KAAf,GAAuBA,KAAvB;AACA,YAAIT,QAAJ,EAAc;AACZA,mBAASwB,cAAT;AACD;AACF;AACF,KA/CD;AAgDD;AACF;;kBAEc,iBAAS;AACtB,MAAIY,MAAMtC,MAAV,EAAkB;AAChBD,eAAWuC,MAAMtC,MAAjB,EAAyBsC,MAAMrC,OAAN,IAAiB,EAA1C,EAA8CqC,MAAMpC,QAApD;AACD;;AAED,SACE;AACE,UAAK,MADP;AAEE,eAAU,yBAFZ;AAGE,iBAAaoC,MAAMC,WAAN,IAAqB,qBAHpC;AAIE,WAAOD,MAAME,KAAN,IAAe,EAJxB;AAKE,cAAUF,MAAMG;AALlB,IADF;AASD,C","file":"Search.js","sourcesContent":["import React, { Component } from 'react';\nimport { fitBounds } from 'google-map-react/utils';\nimport { mapState } from '../state';\n\nfunction initSearch(google, options, getValue) {\n  const input = document.querySelector('.storeLocatorSearchInput');\n  if (input) {\n    const searchBox = new google.maps.places.Autocomplete(input, options);\n\n    searchBox.addListener('place_changed', function() {\n      const place = searchBox.getPlace();\n      if (place) {\n        if (!place.geometry) {\n          console.warn('Returned place contains no geometry');\n          return;\n        }\n\n        const { geometry } = place;\n        const newBounds = {\n          ne: {\n            lat: geometry.viewport.getNorthEast().lat(),\n            lng: geometry.viewport.getNorthEast().lng()\n          },\n          sw: {\n            lat: geometry.viewport.getSouthWest().lat(),\n            lng: geometry.viewport.getSouthWest().lng()\n          }\n        };\n        mapState.setState({ newBounds });\n\n        let updatedAddress = {}\n        place.address_components.map(comp => {\n         if (comp.types.includes('postal_code')) {\n          updatedAddress.zip = comp.short_name\n         }\n         if (comp.types.includes('street_number')) {\n          updatedAddress.address = comp.short_name\n         }\n         if (comp.types.includes('route')) {\n          updatedAddress.address += ` ${comp.short_name}`\n         }\n         if (comp.types.includes('locality')) {\n          updatedAddress.city = comp.short_name\n         }\n         if (comp.types.includes('administrative_area_level_1')) {\n          updatedAddress.state = comp.short_name\n         }\n         if (comp.types.includes('country')) {\n          updatedAddress.country = comp.short_name\n         }\n        })\n        updatedAddress.place = place;\n        if (getValue) {\n          getValue(updatedAddress)\n        }\n      }\n    });\n  }\n}\n\nexport default props => {\n  if (props.google) {\n    initSearch(props.google, props.options || {}, props.getValue);\n  }\n\n  return (\n    <input\n      type=\"text\"\n      className=\"storeLocatorSearchInput\"\n      placeholder={props.placeholder || 'Enter Your Location'}\n      style={props.style || {}}\n      onChange={props.onChange}\n    />\n  );\n};\n"]}