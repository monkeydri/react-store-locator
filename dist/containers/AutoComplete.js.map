{"version":3,"sources":["../../src/containers/AutoComplete.js"],"names":["AutoComplete","props","state","place","updateInput","bind","loaded","google","customOptions","options","types","autocomplete","maps","places","Autocomplete","input","addListener","e","getValue","console","warn","getPlace","undefined","updatedAddress","geometry","mapState","setState","formatted_address","name","target","value","searchInput","updatedInput","placeholder","type","ref","Component","apiKey","googleApiKey"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAEA;;AACA;;AACA;;;;IAEMA,Y;;;AACL,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA,wIACZA,KADY;;AAElB,QAAKC,KAAL,GAAa;AACZC,UAAO;AADK,GAAb;;AAIA,QAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AANkB;AAOlB;;;;sCAEmB;AACnB,OAAI,KAAKJ,KAAL,CAAWK,MAAf,EAAuB;AAAA,iBACY,KAAKL,KADjB;AAAA,QACdM,MADc,UACdA,MADc;AAAA,QACNC,aADM,UACNA,aADM;AAEtB;;AACA,QAAMC;AACLC,YAAO;AADF,OAEFF,aAFE,CAAN;AAIA,SAAKG,YAAL,GAAoB,IAAIJ,OAAOK,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CACnB,KAAKC,KADc,EAEnBN,OAFmB,CAApB;AAIA,SAAKE,YAAL,CAAkBK,WAAlB,CAA8B,eAA9B,EAA+C,KAAKZ,WAApD;AACA,yCAAe,KAAKW,KAApB,EAA2B,KAAKJ,YAAhC;AACA;AACD;;;8BAEWM,C,EAAG;AACd,OAAI,CAAC,KAAKhB,KAAL,CAAWiB,QAAhB,EAA0B;AACzBC,YAAQC,IAAR,CACC,mEADD;AAGA;AACD,OAAIjB,QAAQ,KAAKQ,YAAL,CAAkBU,QAAlB,EAAZ;AACA,OAAIlB,UAAU,KAAKD,KAAL,CAAWC,KAAzB,EAAgCA,QAAQmB,SAAR;AAChC,OAAInB,KAAJ,EAAW;AACV,QAAMoB,iBAAiB,kCAAiBpB,KAAjB,CAAvB;;AAEA,SAAKF,KAAL,CAAWiB,QAAX,CAAoBK,cAApB;AACA,QAAIpB,MAAMqB,QAAV,EAAoB;AACnBC,qBAASC,QAAT,CAAkB,EAAEvB,YAAF,EAAlB;AACA;AACD,QAAIA,MAAMwB,iBAAV,EAA6B;AAC5B,SAAI,KAAK1B,KAAL,CAAWiB,QAAf,EAAyB;AACxB,WAAKQ,QAAL,CAAc,EAAEvB,YAAF,EAAd;AACA;AACD;AACA;AACD,QAAIA,MAAMyB,IAAV,EAAgB;AACf,SAAI,KAAK3B,KAAL,CAAWiB,QAAf,EAAyB;AACxB,WAAKQ,QAAL,CAAc,EAAEvB,YAAF,EAAd;AACA;AACD;AACD,IAlBD,MAkBO,IAAI,CAACA,KAAL,EAAY;AAClB,QAAI,KAAKF,KAAL,CAAWiB,QAAX,IAAuBD,CAA3B,EAA8B;AAC7B,UAAKhB,KAAL,CAAWiB,QAAX,CAAoBD,EAAEY,MAAF,CAASC,KAA7B;AACAL,qBAASC,QAAT,CAAkB,EAAEK,aAAad,EAAEY,MAAF,CAASC,KAAxB,EAAlB;AACA;AACD;AACD;;;2BAEQ;AAAA;;AACR,OAAIE,0CAAoB,KAAK/B,KAAzB,CAAJ;AACA,UAAO+B,aAAa,UAAb,CAAP;AACA,UAAOA,aAAa,QAAb,CAAP;AACA,UAAOA,aAAa,cAAb,CAAP;AACA,UAAOA,aAAa,QAAb,CAAP;AACA,UAAOA,aAAa,eAAb,CAAP;;AAEA,UACC;AACC,kBAAYA,aAAaC,WAAb,IAA4BD,aAAaJ,IADtD;AAEC,UAAM,KAAK3B,KAAL,CAAWiC,IAAX,IAAmB,MAF1B;AAGC,SAAK;AAAA,YAAQ,OAAKnB,KAAL,GAAaoB,IAArB;AAAA,KAHN;AAIC,eAAU,0BAJX;AAKC,cAAU,KAAK/B;AALhB,MAMK4B,YANL,EADD;AAUA;;;EA/EyBI,gB;;kBAkFZ,uCAAiB;AAAA,QAAU;AACzCC,UAAQpC,MAAMqC;AAD2B,EAAV;AAAA,CAAjB,EAEXtC,YAFW,C","file":"AutoComplete.js","sourcesContent":["import React, { Component } from 'react'\nimport { GoogleApiWrapper } from 'google-maps-react'\n\nimport { addressFromPlace } from '../utils/parse-place'\nimport { enableEnterKey } from '../utils/suggestion-event'\nimport { mapState } from '../state'\n\nclass AutoComplete extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tplace: null\n\t\t}\n\n\t\tthis.updateInput = this.updateInput.bind(this)\n\t}\n\n\tcomponentDidMount() {\n\t\tif (this.props.loaded) {\n\t\t\tconst { google, customOptions } = this.props\n\t\t\t// Try using differnet types options. Or just look at search comp and copy directly\n\t\t\tconst options = {\n\t\t\t\ttypes: [`address`],\n\t\t\t\t...customOptions\n\t\t\t}\n\t\t\tthis.autocomplete = new google.maps.places.Autocomplete(\n\t\t\t\tthis.input,\n\t\t\t\toptions\n\t\t\t)\n\t\t\tthis.autocomplete.addListener('place_changed', this.updateInput)\n\t\t\tenableEnterKey(this.input, this.autocomplete)\n\t\t}\n\t}\n\n\tupdateInput(e) {\n\t\tif (!this.props.getValue) {\n\t\t\tconsole.warn(\n\t\t\t\t'Use the prop getValue to get the location back from AutoComplete.'\n\t\t\t)\n\t\t}\n\t\tlet place = this.autocomplete.getPlace()\n\t\tif (place === this.state.place) place = undefined\n\t\tif (place) {\n\t\t\tconst updatedAddress = addressFromPlace(place)\n\n\t\t\tthis.props.getValue(updatedAddress)\n\t\t\tif (place.geometry) {\n\t\t\t\tmapState.setState({ place })\n\t\t\t}\n\t\t\tif (place.formatted_address) {\n\t\t\t\tif (this.props.getValue) {\n\t\t\t\t\tthis.setState({ place })\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (place.name) {\n\t\t\t\tif (this.props.getValue) {\n\t\t\t\t\tthis.setState({ place })\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!place) {\n\t\t\tif (this.props.getValue && e) {\n\t\t\t\tthis.props.getValue(e.target.value)\n\t\t\t\tmapState.setState({ searchInput: e.target.value })\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tlet updatedInput = { ...this.props }\n\t\tdelete updatedInput['getValue']\n\t\tdelete updatedInput['google']\n\t\tdelete updatedInput['googleApiKey']\n\t\tdelete updatedInput['loaded']\n\t\tdelete updatedInput['customOptions']\n\n\t\treturn (\n\t\t\t<input\n\t\t\t\taria-label={updatedInput.placeholder || updatedInput.name}\n\t\t\t\ttype={this.props.type || 'text'}\n\t\t\t\tref={ref => (this.input = ref)}\n\t\t\t\tclassName=\"storeLocatorAutocomplete\"\n\t\t\t\tonChange={this.updateInput}\n\t\t\t\t{...updatedInput}\n\t\t\t/>\n\t\t)\n\t}\n}\n\nexport default GoogleApiWrapper(props => ({\n\tapiKey: props.googleApiKey\n}))(AutoComplete)\n"]}