{"version":3,"sources":["../../src/containers/AutoComplete.js"],"names":["AutoComplete","props","state","place","updateInput","bind","loaded","google","customOptions","options","types","autocomplete","maps","places","Autocomplete","input","addListener","e","getValue","console","warn","getPlace","undefined","updatedAddress","address_components","map","comp","includes","zip","short_name","address","city","country","latitude","geometry","location","lat","longitude","lng","formatted_address","setState","name","target","value","updatedInput","type","ref","Component","apiKey","googleApiKey"],"mappings":"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","file":"AutoComplete.js","sourcesContent":["import React, { Component } from 'react'\nimport { GoogleApiWrapper } from 'google-maps-react'\n\nclass AutoComplete extends Component {\n constructor(props) {\n  super(props)\n  this.state = {\n   place: null\n  }\n\n  this.updateInput = this.updateInput.bind(this)\n }\n\n componentDidMount() {\n  if (this.props.loaded) {\n   const { google, customOptions } = this.props\n   // Try using differnet types options. Or just look at search comp and copy directly\n   const options = {\n    types: [`address`],\n    ...customOptions\n   }\n   this.autocomplete = new google.maps.places.Autocomplete(this.input, options)\n   this.autocomplete.addListener('place_changed', this.updateInput)\n  }\n }\n\n updateInput(e) {\n  if (!this.props.getValue) {\n   console.warn(\n    'Use the prop getValue to get the location back from AutoComplete.'\n   )\n  }\n  let place = this.autocomplete.getPlace()\n  if (place === this.state.place) place = undefined\n  if (place) {\n   let updatedAddress = {}\n   place.address_components.map(comp => {\n    if (comp.types.includes('postal_code')) {\n     updatedAddress.zip = comp.short_name\n    }\n    if (comp.types.includes('street_number')) {\n     updatedAddress.address = comp.short_name\n    }\n    if (comp.types.includes('route')) {\n     updatedAddress.address += ` ${comp.short_name}`\n    }\n    if (comp.types.includes('locality')) {\n     updatedAddress.city = comp.short_name\n    }\n    if (comp.types.includes('administrative_area_level_1')) {\n     updatedAddress.state = comp.short_name\n    }\n    if (comp.types.includes('country')) {\n     updatedAddress.country = comp.short_name\n    }\n\t })\n\t updatedAddress.latitude = place.geometry.location.lat();\n\t updatedAddress.longitude = place.geometry.location.lng();\n   this.props.getValue(updatedAddress)\n\n   if (place.formatted_address) {\n    if (this.props.getValue) {\n     this.setState({\n      place: place\n     })\n    }\n    return\n   }\n   if (place.name) {\n    if (this.props.getValue) {\n     this.setState({\n      place: place\n     })\n    }\n   }\n  } else if (!place) {\n   if (this.props.getValue) {\n    this.props.getValue(e.target.value)\n   }\n  }\n }\n\n render() {\n  let updatedInput = { ...this.props }\n  delete updatedInput['getValue']\n  delete updatedInput['google']\n  delete updatedInput['googleApiKey']\n  delete updatedInput['loaded']\n\n  return (\n   <input\n    type={this.props.type || 'text'}\n    ref={ref => (this.input = ref)}\n    className=\"storeLocatorAutocomplete\"\n    onChange={this.updateInput}\n    {...updatedInput}\n   />\n  )\n }\n}\n\nexport default GoogleApiWrapper(props => ({\n apiKey: props.googleApiKey\n}))(AutoComplete)\n"]}