{"version":3,"sources":["../../src/containers/AutoComplete.js"],"names":["AutoComplete","props","state","place","updateInput","bind","loaded","google","customOptions","options","types","autocomplete","maps","places","Autocomplete","input","addListener","e","getValue","console","warn","getPlace","undefined","updatedAddress","address_components","map","comp","includes","zip","short_name","number","street","city","country","formatted_address","setState","name","target","value","updatedInput","type","ref","Component","apiKey","googleApiKey"],"mappings":"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","file":"AutoComplete.js","sourcesContent":["import React, { Component } from 'react'\nimport { GoogleApiWrapper } from 'google-maps-react'\nimport { tagAutoCompleteContainer, enableEnterKey } from '../helpers'\n\nclass AutoComplete extends Component {\n constructor(props) {\n  super(props)\n  this.state = {\n   place: null\n  }\n  this.updateInput = this.updateInput.bind(this)\n }\n\n componentDidMount() {\n  if (this.props.loaded) {\n   const { google, customOptions } = this.props\n   // Try using differnet types options. Or just look at search comp and copy directly\n   const options = {\n    types: [`address`],\n    ...customOptions\n   }\n   this.autocomplete = new google.maps.places.Autocomplete(this.input, options)\n   this.autocomplete.addListener('place_changed', this.updateInput)\n   enableEnterKey(this.input);\n   tagAutoCompleteContainer(this.input);\n  }\n }\n\n updateInput(e) {\n  if (!this.props.getValue) {\n   console.warn(\n    'Use the prop getValue to get the location back from AutoComplete.'\n   )\n  }\n  let place = this.autocomplete.getPlace()\n  if (place === this.state.place) place = undefined\n  if (place) {\n   let updatedAddress = {}\n   place.address_components.map(comp => {\n    if (comp.types.includes('postal_code')) {\n     updatedAddress.zip = comp.short_name\n    }\n    if (comp.types.includes('street_number')) {\n     updatedAddress.number = comp.short_name\n    }\n    if (comp.types.includes('route')) {\n     updatedAddress.street = comp.short_name\n    }\n    if (comp.types.includes('locality')) {\n     updatedAddress.city = comp.short_name\n    }\n    if (comp.types.includes('administrative_area_level_1')) {\n     updatedAddress.state = comp.short_name\n    }\n    if (comp.types.includes('country')) {\n     updatedAddress.country = comp.short_name\n    }\n   })\n   updatedAddress.place = place;\n   this.props.getValue(updatedAddress)\n\n   if (place.formatted_address) {\n    if (this.props.getValue) {\n     this.setState({\n      place: place\n     })\n    }\n    return\n   }\n   if (place.name) {\n    if (this.props.getValue) {\n     this.setState({\n      place: place\n     })\n    }\n   }\n  } else if (!place) {\n   if (this.props.getValue && e) {\n    this.props.getValue(e.target.value)\n   }\n  }\n }\n\n render() {\n  let updatedInput = { ...this.props }\n  delete updatedInput['getValue']\n  delete updatedInput['google']\n  delete updatedInput['googleApiKey']\n  delete updatedInput['loaded']\n  delete updatedInput['customOptions']\n\n  return (\n   <input\n    type={this.props.type || 'text'}\n    ref={ref => (this.input = ref)}\n    className=\"storeLocatorAutocomplete\"\n    onChange={this.updateInput}\n    {...updatedInput}\n   />\n  )\n }\n}\n\nexport default GoogleApiWrapper(props => ({\n apiKey: props.googleApiKey\n}))(AutoComplete)\n"]}