{"version":3,"sources":["../../src/utils/location-close.js"],"names":["apiKey","query","locations","console","error","length","location","method","url","geolocationUrl","data","results","geometry","updatedLocations","forEach","loc","i","warn","JSON","stringify","latitude","longitude","Object","keys","nearestLocation","geolib","findNearest","foundLocation","find"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;qFAEe;AAAA,MAASA,MAAT,SAASA,MAAT;AAAA,MAAiBC,KAAjB,SAAiBA,KAAjB;AAAA,MAAwBC,SAAxB,SAAwBA,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACTF,MADS;AAAA;AAAA;AAAA;;AAEbG,cAAQC,KAAR;AAFa;;AAAA;AAAA,UAKTH,KALS;AAAA;AAAA;AAAA;;AAMbE,cAAQC,KAAR;AANa;;AAAA;AAAA,YASV,CAACF,SAAD,IAAcA,UAAUG,MAAV,GAAmB,CATvB;AAAA;AAAA;AAAA;;AAUbF,cAAQC,KAAR;AAVa;;AAAA;AAaVE,cAbU,GAaC,IAbD;AAAA;AAAA,aAce,qBAAM;AAClCC,oBADkC;AAElCC,0FAAiFP,KAAjF,wBAAyGD;AAFvE,OAAN,CAdf;;AAAA;AAcRS,oBAdQ;AAkBNC,UAlBM,GAkBGD,cAlBH,CAkBNC,IAlBM;AAmBNC,aAnBM,GAmBMD,IAnBN,CAmBNC,OAnBM;;AAoBd,UAAIA,WAAWA,QAAQN,MAAR,GAAiB,CAAhC,EAAmC;AAC1BO,eAD0B,GACbD,QAAQ,CAAR,CADa,CAC1BC,QAD0B;;AAElC,WAAIA,QAAJ,EAAc;AACbN,mBAAWM,oBAAX;AACA;AACD;;AAzBa,UA2BTN,QA3BS;AAAA;AAAA;AAAA;;AA4BbH,cAAQC,KAAR;AA5Ba;;AAAA;AAgCVS,sBAhCU,GAgCS,EAhCT;;AAiCdX,gBAAUY,OAAV,CAAkB,UAACC,GAAD,EAAMC,CAAN,EAAY;AAC7B,WAAI,CAACD,UAAD,IAAe,CAACA,UAApB,EAAgC;AAC/BZ,gBAAQc,IAAR,CACIC,KAAKC,SAAL,CACFjB,UAAUc,CAAV,CADE,CADJ;AAKA;AACA;AACD,WAAI,CAACD,SAAL,EAAgB;AACfZ,gBAAQc,IAAR,gCAA0CC,KAAKC,SAAL,CAAejB,UAAUc,CAAV,CAAf,CAA1C;AACA;AACA;AACDH,wBAAiBE,SAAjB,+BACIA,GADJ;AAECK,kBAAUL,UAFX;AAGCM,mBAAWN;AAHZ;AAKA,OAlBD;;AAjCc,YAqDVO,OAAOC,IAAP,CAAYV,gBAAZ,EAA8BR,MAA9B,GAAuC,CArD7B;AAAA;AAAA;AAAA;;AAsDbF,cAAQC,KAAR;AAtDa;;AAAA;AAyDRoB,qBAzDQ,GAyDUC,iBAAOC,WAAP,CAAmBpB,QAAnB,EAA6BO,gBAA7B,CAzDV;AA0DRc,mBA1DQ,GA0DQzB,UAAU0B,IAAV,CACrB;AAAA,cAAOb,cAAcS,sBAArB;AAAA,OADqB,CA1DR;;AAAA,UA6DTG,aA7DS;AAAA;AAAA;AAAA;;AA8DbxB,cAAQC,KAAR;AA9Da;;AAAA;AAAA,uCAiEPuB,aAjEO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E","file":"location-close.js","sourcesContent":["import axios from 'axios'\nimport geolib from 'geolib'\n\nexport default async ({ apiKey, query, locations }) => {\n\tif (!apiKey) {\n\t\tconsole.error(`No Api key provided`)\n\t\treturn\n\t}\n\tif (!query) {\n\t\tconsole.error(`Must provide a query for a location to be found`)\n\t\treturn\n\t}\n\tif (!locations || locations.length < 1) {\n\t\tconsole.error(`You must provide locations in order to find the closest one`)\n\t\treturn\n\t}\n\tlet location = null\n\tconst geolocationUrl = await axios({\n\t\tmethod: `get`,\n\t\turl: `https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:${query}|country:US&key=${apiKey}`\n\t})\n\tconst { data } = geolocationUrl\n\tconst { results } = data\n\tif (results && results.length > 0) {\n\t\tconst { geometry } = results[0]\n\t\tif (geometry) {\n\t\t\tlocation = geometry[`location`]\n\t\t}\n\t}\n\n\tif (!location) {\n\t\tconsole.error(`No location found by that query, please try again`)\n\t\treturn\n\t}\n\n\tlet updatedLocations = {}\n\tlocations.forEach((loc, i) => {\n\t\tif (!loc[`lat`] || !loc[`lng`]) {\n\t\t\tconsole.warn(\n\t\t\t\t`${JSON.stringify(\n\t\t\t\t\tlocations[i]\n\t\t\t\t)} will be omitted from the search, must have 'lat' and 'lng' fields`\n\t\t\t)\n\t\t\treturn\n\t\t}\n\t\tif (!loc[`id`]) {\n\t\t\tconsole.warn(`Location must have an id: ${JSON.stringify(locations[i])}`)\n\t\t\treturn\n\t\t}\n\t\tupdatedLocations[loc[`id`]] = {\n\t\t\t...loc,\n\t\t\tlatitude: loc[`lat`],\n\t\t\tlongitude: loc[`lng`]\n\t\t}\n\t})\n\n\tif (Object.keys(updatedLocations).length < 1) {\n\t\tconsole.error(`No locations to compare with`)\n\t\treturn\n\t}\n\tconst nearestLocation = geolib.findNearest(location, updatedLocations)\n\tconst foundLocation = locations.find(\n\t\tloc => loc[`id`] === nearestLocation[`key`]\n\t)\n\tif (!foundLocation) {\n\t\tconsole.error(`No nearest location found`)\n\t\treturn\n\t}\n\treturn foundLocation\n}\n"]}