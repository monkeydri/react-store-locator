{"version":3,"sources":["../../../src/utils/supercluster/index.js"],"names":["defaultOptions","minZoom","maxZoom","radius","extent","nodeSize","log","reduce","map","props","Supercluster","options","extend","Object","create","trees","Array","points","console","time","timerId","length","clusters","i","geometry","push","createPointCluster","window","KDBush","getX","getY","Float32Array","timeEnd","z","now","Date","_cluster","bbox","zoom","minLng","minLat","Math","max","min","maxLng","maxLat","easternHem","getClusters","westernHem","concat","tree","_limitZoom","ids","range","lngX","latY","id","c","numPoints","getClusterJSON","index","clusterId","originId","originZoom","errorMsg","Error","origin","r","pow","within","x","y","children","parentId","limit","offset","leaves","_appendLeaves","z2","p","top","bottom","tile","features","_addTileFeatures","clusterZoom","getChildren","properties","cluster_id","result","skipped","child","cluster","point_count","f","type","round","tags","getClusterProperties","undefined","neighborIds","wx","wy","clusterProperties","_map","neighborId","b","numPoints2","createCluster","point","Infinity","coordinates","xLng","yLat","count","abbrev","point_count_abbreviated","lng","lat","sin","PI","y2","atan","exp","dest","src"],"mappings":"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","file":"index.js","sourcesContent":["/* Forked to remove KDBush dependency in order to make backward compatible with ie11 */\n// import KDBush from 'kdbush';\n\nconst defaultOptions = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: props => props // props => ({sum: props.my_value})\n};\n\nexport default class Supercluster {\n    constructor(options) {\n        this.options = extend(Object.create(defaultOptions), options);\n        this.trees = new Array(this.options.maxZoom + 1);\n    }\n\n    load(points) {\n        const {log, minZoom, maxZoom, nodeSize} = this.options;\n\n        if (log) console.time('total time');\n\n        const timerId = `prepare ${  points.length  } points`;\n        if (log) console.time(timerId);\n\n        this.points = points;\n\n        // generate a cluster object for each point and index input points into a KD-tree\n        let clusters = [];\n        for (let i = 0; i < points.length; i++) {\n            if (!points[i].geometry) continue;\n            clusters.push(createPointCluster(points[i], i));\n        }\n        this.trees[maxZoom + 1] = new window.KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n        if (log) console.timeEnd(timerId);\n\n        // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n        // results in a cluster hierarchy across zoom levels\n        for (let z = maxZoom; z >= minZoom; z--) {\n            const now = +Date.now();\n\n            // create a new set of clusters for the zoom and index them with a KD-tree\n            clusters = this._cluster(clusters, z);\n            this.trees[z] = new window.KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n            if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n        }\n\n        if (log) console.timeEnd('total time');\n\n        return this;\n    }\n\n    getClusters(bbox, zoom) {\n        let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n        const minLat = Math.max(-90, Math.min(90, bbox[1]));\n        let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n        const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n        if (bbox[2] - bbox[0] >= 360) {\n            minLng = -180;\n            maxLng = 180;\n        } else if (minLng > maxLng) {\n            const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n            const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n            return easternHem.concat(westernHem);\n        }\n\n        const tree = this.trees[this._limitZoom(zoom)];\n        const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n        const clusters = [];\n        for (const id of ids) {\n            const c = tree.points[id];\n            clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n        return clusters;\n    }\n\n    getChildren(clusterId) {\n        const originId = clusterId >> 5;\n        const originZoom = clusterId % 32;\n        const errorMsg = 'No cluster with the specified id.';\n\n        const index = this.trees[originZoom];\n        if (!index) throw new Error(errorMsg);\n\n        const origin = index.points[originId];\n        if (!origin) throw new Error(errorMsg);\n\n        const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n        const ids = index.within(origin.x, origin.y, r);\n        const children = [];\n        for (const id of ids) {\n            const c = index.points[id];\n            if (c.parentId === clusterId) {\n                children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n            }\n        }\n\n        if (children.length === 0) throw new Error(errorMsg);\n\n        return children;\n    }\n\n    getLeaves(clusterId, limit, offset) {\n        limit = limit || 10;\n        offset = offset || 0;\n\n        const leaves = [];\n        this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n        return leaves;\n    }\n\n    getTile(z, x, y) {\n        const tree = this.trees[this._limitZoom(z)];\n        const z2 = Math.pow(2, z);\n        const {extent, radius} = this.options;\n        const p = radius / extent;\n        const top = (y - p) / z2;\n        const bottom = (y + 1 + p) / z2;\n\n        const tile = {\n            features: []\n        };\n\n        this._addTileFeatures(\n            tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n            tree.points, x, y, z2, tile);\n\n        if (x === 0) {\n            this._addTileFeatures(\n                tree.range(1 - p / z2, top, 1, bottom),\n                tree.points, z2, y, z2, tile);\n        }\n        if (x === z2 - 1) {\n            this._addTileFeatures(\n                tree.range(0, top, p / z2, bottom),\n                tree.points, -1, y, z2, tile);\n        }\n\n        return tile.features.length ? tile : null;\n    }\n\n    getClusterExpansionZoom(clusterId) {\n        let clusterZoom = (clusterId % 32) - 1;\n        while (clusterZoom <= this.options.maxZoom) {\n            const children = this.getChildren(clusterId);\n            clusterZoom++;\n            if (children.length !== 1) break;\n            clusterId = children[0].properties.cluster_id;\n        }\n        return clusterZoom;\n    }\n\n    _appendLeaves(result, clusterId, limit, offset, skipped) {\n        const children = this.getChildren(clusterId);\n\n        for (const child of children) {\n            const props = child.properties;\n\n            if (props && props.cluster) {\n                if (skipped + props.point_count <= offset) {\n                    // skip the whole cluster\n                    skipped += props.point_count;\n                } else {\n                    // enter the cluster\n                    skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                    // exit the cluster\n                }\n            } else if (skipped < offset) {\n                // skip a single point\n                skipped++;\n            } else {\n                // add a single point\n                result.push(child);\n            }\n            if (result.length === limit) break;\n        }\n\n        return skipped;\n    }\n\n    _addTileFeatures(ids, points, x, y, z2, tile) {\n        for (const i of ids) {\n            const c = points[i];\n            const f = {\n                type: 1,\n                geometry: [[\n                    Math.round(this.options.extent * (c.x * z2 - x)),\n                    Math.round(this.options.extent * (c.y * z2 - y))\n                ]],\n                tags: c.numPoints ? getClusterProperties(c) : this.points[c.index].properties\n            };\n            const id = c.numPoints ? c.id : this.points[c.index].id;\n            if (id !== undefined) {\n                f.id = id;\n            }\n            tile.features.push(f);\n        }\n    }\n\n    _limitZoom(z) {\n        return Math.max(this.options.minZoom, Math.min(z, this.options.maxZoom + 1));\n    }\n\n    _cluster(points, zoom) {\n        const clusters = [];\n        const {radius, extent, reduce} = this.options;\n        const r = radius / (extent * Math.pow(2, zoom));\n\n        // loop through each point\n        for (let i = 0; i < points.length; i++) {\n            const p = points[i];\n            // if we've already visited the point at this zoom level, skip it\n            if (p.zoom <= zoom) continue;\n            p.zoom = zoom;\n\n            // find all nearby points\n            const tree = this.trees[zoom + 1];\n            const neighborIds = tree.within(p.x, p.y, r);\n\n            let numPoints = p.numPoints || 1;\n            let wx = p.x * numPoints;\n            let wy = p.y * numPoints;\n\n            const clusterProperties = reduce ? this._map(p) : null;\n\n            // encode both zoom and point index on which the cluster originated\n            const id = (i << 5) + (zoom + 1);\n\n            for (const neighborId of neighborIds) {\n                const b = tree.points[neighborId];\n                // filter out neighbors that are already processed\n                if (b.zoom <= zoom) continue;\n                b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                const numPoints2 = b.numPoints || 1;\n                wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n                wy += b.y * numPoints2;\n\n                numPoints += numPoints2;\n                b.parentId = id;\n\n                if (reduce) {\n                    reduce(clusterProperties, this._map(b));\n                }\n            }\n\n            if (numPoints === 1) {\n                clusters.push(p);\n            } else {\n                p.parentId = id;\n                clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n            }\n        }\n\n        return clusters;\n    }\n\n    _map(point) {\n        return point.numPoints ? point.properties : this.options.map(this.points[point.index].properties);\n    }\n}\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x, // weighted cluster center\n        y,\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints,\n        properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    const [x, y] = p.geometry.coordinates;\n    return {\n        x: lngX(x), // projected point coordinates\n        y: latY(y),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    const count = cluster.numPoints;\n    const abbrev =\n        count >= 10000 ? `${Math.round(count / 1000)  }k` :\n        count >= 1000 ? `${Math.round(count / 100) / 10  }k` : count;\n    return extend(extend({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    const y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n    for (const id in src) dest[id] = src[id];\n    return dest;\n}\n\nfunction getX(p) {\n    return p.x;\n}\nfunction getY(p) {\n    return p.y;\n}\n"]}