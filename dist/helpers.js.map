{"version":3,"sources":["../src/helpers.js"],"names":["enableEnterKey","input","originalAddEventListener","addEventListener","addEventListenerWrapper","type","listener","originalListener","event","pacContainer","getAutoCompleteContainer","suggestionsVisible","style","display","suggestionSelected","getElementsByClassName","length","which","keyCode","arrowDownEvent","JSON","parse","stringify","k","v","Node","Window","apply","preventDefault","hasId","element","id","autocompleteContainers","Array","prototype","filter","call","document","autocompleteContainer","console","warn","tagAutoCompleteContainer","Math","random","toString","substring","untaggedAutocompleteContainers","untaggedAutocompleteContainer"],"mappings":"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","file":"helpers.js","sourcesContent":["export const enableEnterKey = (input) =>\n{\n\tconst originalAddEventListener = input.addEventListener;\n\n\tconst addEventListenerWrapper = (type, listener) =>\n\t{\n\t\tif (type === \"keydown\")\n\t\t{\n\t\t\tconst originalListener = listener;\n\t\t\tlistener = (event) =>\n\t\t\t{\n\t\t\t\t// 0. get autocomplete div corresponing to input field\n\t\t\t\tconst pacContainer = getAutoCompleteContainer(input);\n\t\t\t\tif (pacContainer)\n\t\t\t\t{\n\t\t\t\t\t// 1. check if it is visible\n\t\t\t\t\t// WAY 1 : check size > 0 (like jQuery isVisible() does) const suggestionsVisible = pacContainerArray.length > 0 ? pacContainerArray[0].offsetWidth > 0 : false;\n\t\t\t\t\t// WAY 2 : check if display property is not 'none'\n\t\t\t\t\tconst suggestionsVisible = pacContainer.style.display !== 'none';\n\t\t\t\t\t// WAY 3 : check if it has children\n\n\t\t\t\t\t// 2. check if one of the suggestions is selected\n\t\t\t\t\tconst suggestionSelected = pacContainer.getElementsByClassName('pac-item-selected').length > 0;\n\n\t\t\t\t\t// enter key press\n\t\t\t\t\tif (event.which === 13 || event.keyCode === 13)\n\t\t\t\t\t{\n\t\t\t\t\t\t// user press enter while no suggestion is selected yet : auto-select first one (using fake arrow key) then it will be choosen by enter key press. preventDefault so form is not submitted\n\t\t\t\t\t\tif (suggestionsVisible && !suggestionSelected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// 3. make event from original event (copy)\n\t\t\t\t\t\t\tconst arrowDownEvent = JSON.parse(JSON.stringify(event, (k, v) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (v instanceof Node) return 'Node';\n\t\t\t\t\t\t\t\tif (v instanceof Window) return 'Window';\n\t\t\t\t\t\t\t\treturn v;\n\t\t\t\t\t\t\t}, ' '));\n\t\t\t\t\t\t\tarrowDownEvent.which = 40;\n\t\t\t\t\t\t\tarrowDownEvent.keyCode = 40;\n\n\t\t\t\t\t\t\t// 4. send arrow down key press event (add simulated event) before return press)\n\t\t\t\t\t\t\toriginalListener.apply(input, [arrowDownEvent]);\n\n\t\t\t\t\t\t\t// 5.\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// suggestion is already selected (by arrow key) and user presses enter to choose it. preventDefault so form is not submitted\n\t\t\t\t\t\telse if (suggestionsVisible && suggestionSelected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// 5.\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// else if suggestions not visible do not prevent default (ex submit)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 6. sent (original) return key press event\n\t\t\t\toriginalListener.apply(input, [event])\n\t\t\t}\n\t\t}\n\t\toriginalAddEventListener.apply(input, [type, listener])\n\t}\n\n\tinput.addEventListener = addEventListenerWrapper;\n};\n\nconst hasId = (element) =>\n{\n\tif (typeof element.id === 'string')\n\t{\n\t\treturn element.id.length > 0;\n\t}\n\telse return false;\n}\n\nconst getAutoCompleteContainer = (input) =>\n{\n\tconst autocompleteContainers = Array.prototype.filter.call(document.getElementsByClassName('pac-container'), (autocompleteContainer) => autocompleteContainer.id === input.id);\n\n\tif (autocompleteContainers.length === 1) return autocompleteContainers[0];\n\n\telse if (autocompleteContainers.length > 1) console.warn('found more than one corresponding google autcomplete container found')\n\n\telse console.warn('could not find any corresponding google autocomplete container');\n}\n\nexport const tagAutoCompleteContainer = (input) =>\n{\n\tconst id = (Math.random() + 1).toString(36).substring(7);\n\tinput.id = id;\n\n\t// find google autocomplete input which is not tagged yet\n\tconst untaggedAutocompleteContainers = Array.prototype.filter.call(document.getElementsByClassName('pac-container'), (untaggedAutocompleteContainer) => !hasId(untaggedAutocompleteContainer));\n\n\t// tag it (if found only one)\n\tif (untaggedAutocompleteContainers.length === 1) untaggedAutocompleteContainers[0].id = id;\n\n\telse if (untaggedAutocompleteContainers.length > 1) console.warn('found more than one untagged google autcomplete container')\n\n\telse console.warn('could not find any untagged google autocomplete container');\n}"]}