{"version":3,"sources":["../src/helpers.js"],"names":["enableEnterKey","input","autocomplete","originalAddEventListener","addEventListener","addEventListenerWrapper","type","listener","originalListener","event","pacContainer","getAutoCompleteContainer","suggestionsVisible","style","display","suggestionSelected","getElementsByClassName","length","which","keyCode","arrowDownEvent","JSON","parse","stringify","k","v","Node","Window","apply","preventDefault","console","warn","gm_accessors_","place","placeKey","Object","keys","find","value","hasOwnProperty","inputKey","classList","contains"],"mappings":";;;;;;;;;;;;;AAAO,IAAMA,0CAAiB,SAAjBA,cAAiB,CAACC,KAAD,EAAQC,YAAR,EAC9B;AACC,KAAMC,2BAA2BF,MAAMG,gBAAvC;;AAEA,KAAMC,0BAA0B,SAA1BA,uBAA0B,CAACC,IAAD,EAAOC,QAAP,EAChC;AACC,MAAID,SAAS,SAAb,EACA;AACC,OAAME,mBAAmBD,QAAzB;AACAA,cAAW,kBAACE,KAAD,EACX;AACC;AACA,QAAMC,eAAeC,yBAAyBT,YAAzB,CAArB;AACA,QAAIQ,YAAJ,EACA;AACC;AACA;AACA;AACA,SAAME,qBAAqBF,aAAaG,KAAb,CAAmBC,OAAnB,KAA+B,MAA1D;AACA;;AAEA;AACA,SAAMC,qBAAqBL,aAAaM,sBAAb,CAAoC,mBAApC,EAAyDC,MAAzD,GAAkE,CAA7F;;AAEA;AACA,SAAIR,MAAMS,KAAN,KAAgB,EAAhB,IAAsBT,MAAMU,OAAN,KAAkB,EAA5C,EACA;AACC;AACA,UAAIP,sBAAsB,CAACG,kBAA3B,EACA;AACC;AACA,WAAMK,iBAAiBC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAed,KAAf,EAAsB,UAACe,CAAD,EAAIC,CAAJ,EACxD;AACC,YAAIA,aAAaC,IAAjB,EAAuB,OAAO,MAAP;AACvB,YAAID,aAAaE,MAAjB,EAAyB,OAAO,QAAP;AACzB,eAAOF,CAAP;AACA,QALiC,EAK/B,GAL+B,CAAX,CAAvB;AAMAL,sBAAeF,KAAf,GAAuB,EAAvB;AACAE,sBAAeD,OAAf,GAAyB,EAAzB;;AAEA;AACAX,wBAAiBoB,KAAjB,CAAuB3B,KAAvB,EAA8B,CAACmB,cAAD,CAA9B;;AAEA;AACAX,aAAMoB,cAAN;AACA;;AAED;AAnBA,WAoBK,IAAIjB,sBAAsBG,kBAA1B,EACL;AACC;AACAN,cAAMoB,cAAN;AACA;AACD;AACA;AACD,KA1CD,MA2CKC,QAAQC,IAAR,CAAa,8CAAb;;AAEL;AACAvB,qBAAiBoB,KAAjB,CAAuB3B,KAAvB,EAA8B,CAACQ,KAAD,CAA9B;AACA,IAnDD;AAoDA;AACDN,2BAAyByB,KAAzB,CAA+B3B,KAA/B,EAAsC,CAACK,IAAD,EAAOC,QAAP,CAAtC;AACA,EA3DD;;AA6DAN,OAAMG,gBAAN,GAAyBC,uBAAzB;AACA,CAlEM;;AAoEP,IAAMM,2BAA2B,SAA3BA,wBAA2B,CAACT,YAAD,EACjC;AACC,KAAIA,gBAAgBA,aAAa8B,aAAjC,EACA;AACC,MAAMC,QAAQ/B,aAAa8B,aAAb,CAA2BC,KAAzC;;AAEA,MAAMC,WAAWC,OAAOC,IAAP,CAAYH,KAAZ,EAAmBI,IAAnB,CAAwB,UAACC,KAAD;AAAA,UACtC,sBAAOL,MAAMK,KAAN,CAAP,MAAyB,QAA1B,IAAwCL,MAAMK,KAAN,EAAaC,cAAb,CAA4B,eAA5B,CADD;AAAA,GAAxB,CAAjB;;AAIA,MAAMtC,QAAQgC,MAAMC,QAAN,EAAgBF,aAAhB,CAA8B/B,KAA9B,CAAoCiC,QAApC,CAAd;;AAEA,MAAMM,WAAWL,OAAOC,IAAP,CAAYnC,KAAZ,EAAmBoC,IAAnB,CAAwB,UAACC,KAAD;AAAA,UACvCrC,MAAMqC,KAAN,EAAaG,SAAb,IAA0BxC,MAAMqC,KAAN,EAAaG,SAAb,CAAuBC,QAAvB,CAAgC,eAAhC,CADa;AAAA,GAAxB,CAAjB;;AAIA,SAAOzC,MAAMuC,QAAN,CAAP;AACA,EAfD,MAgBKV,QAAQC,IAAR,CAAa,+EAAb;AACL,CAnBD","file":"helpers.js","sourcesContent":["export const enableEnterKey = (input, autocomplete) =>\n{\n\tconst originalAddEventListener = input.addEventListener;\n\n\tconst addEventListenerWrapper = (type, listener) =>\n\t{\n\t\tif (type === \"keydown\")\n\t\t{\n\t\t\tconst originalListener = listener;\n\t\t\tlistener = (event) =>\n\t\t\t{\n\t\t\t\t// 0. get autocomplete div corresponing to input field\n\t\t\t\tconst pacContainer = getAutoCompleteContainer(autocomplete);\n\t\t\t\tif (pacContainer)\n\t\t\t\t{\n\t\t\t\t\t// 1. check if it is visible\n\t\t\t\t\t// WAY 1 : check size > 0 (like jQuery isVisible() does) const suggestionsVisible = pacContainerArray.length > 0 ? pacContainerArray[0].offsetWidth > 0 : false;\n\t\t\t\t\t// WAY 2 : check if display property is not 'none'\n\t\t\t\t\tconst suggestionsVisible = pacContainer.style.display !== 'none';\n\t\t\t\t\t// WAY 3 : check if it has children\n\n\t\t\t\t\t// 2. check if one of the suggestions is selected\n\t\t\t\t\tconst suggestionSelected = pacContainer.getElementsByClassName('pac-item-selected').length > 0;\n\n\t\t\t\t\t// enter key press\n\t\t\t\t\tif (event.which === 13 || event.keyCode === 13)\n\t\t\t\t\t{\n\t\t\t\t\t\t// user press enter while no suggestion is selected yet : auto-select first one (using fake arrow key) then it will be choosen by enter key press. preventDefault so form is not submitted\n\t\t\t\t\t\tif (suggestionsVisible && !suggestionSelected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// 3. make event from original event (copy)\n\t\t\t\t\t\t\tconst arrowDownEvent = JSON.parse(JSON.stringify(event, (k, v) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (v instanceof Node) return 'Node';\n\t\t\t\t\t\t\t\tif (v instanceof Window) return 'Window';\n\t\t\t\t\t\t\t\treturn v;\n\t\t\t\t\t\t\t}, ' '));\n\t\t\t\t\t\t\tarrowDownEvent.which = 40;\n\t\t\t\t\t\t\tarrowDownEvent.keyCode = 40;\n\n\t\t\t\t\t\t\t// 4. send arrow down key press event (add simulated event) before return press)\n\t\t\t\t\t\t\toriginalListener.apply(input, [arrowDownEvent]);\n\n\t\t\t\t\t\t\t// 5.\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// suggestion is already selected (by arrow key) and user presses enter to choose it. preventDefault so form is not submitted\n\t\t\t\t\t\telse if (suggestionsVisible && suggestionSelected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// 5.\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// else if suggestions not visible do not prevent default (ex submit)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse console.warn('could not find google autocomplete container');\n\n\t\t\t\t// 6. sent (original) return key press event\n\t\t\t\toriginalListener.apply(input, [event])\n\t\t\t}\n\t\t}\n\t\toriginalAddEventListener.apply(input, [type, listener])\n\t}\n\n\tinput.addEventListener = addEventListenerWrapper;\n};\n\nconst getAutoCompleteContainer = (autocomplete) =>\n{\n\tif (autocomplete && autocomplete.gm_accessors_)\n\t{\n\t\tconst place = autocomplete.gm_accessors_.place;\n\n\t\tconst placeKey = Object.keys(place).find((value) => (\n\t\t\t (typeof(place[value]) === 'object') && (place[value].hasOwnProperty('gm_accessors_'))\n\t\t));\n\t\n\t\tconst input = place[placeKey].gm_accessors_.input[placeKey];\n\t\n\t\tconst inputKey = Object.keys(input).find((value) => (\n\t\t\t(input[value].classList && input[value].classList.contains('pac-container'))\n\t\t));\n\t\n\t\treturn input[inputKey];\n\t}\n\telse console.warn('could not find google autocomplete container : incomplete autocomplete object')\n}"]}